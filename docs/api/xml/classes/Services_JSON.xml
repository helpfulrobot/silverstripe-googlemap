<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Services_JSON" namespace="" name="Services_JSON" abstract="false" final="false" start="115" end="777">
  <file path="/var/www/_modules/googlemap/trunk/docs/en/phpdox/../../../code/converters/thirdparty" file="Services_JSON.php" realpath="/var/www/_modules/googlemap/trunk/code/converters/thirdparty/Services_JSON.php" size="34784" time="2015-03-14T10:22:53+13:00" unixtime="1426281773" sha1="b08ffb3c54cc5306c25f466e5db4d7f840e09a6a" relative="code/converters/thirdparty/Services_JSON.php"/>
  <docblock>
    <description compact="Converts to and from JSON format.">Brief example of use:

&lt;code&gt;
// create a new instance of Services_JSON
$json = new Services_JSON();

// convert a complexe value to JSON notation, and send it to the browser
$value = array('foo', 'bar', array(1, 2, 'baz'), array(3, array(4)));
$output = $json-&gt;encode($value);

print($output);
// prints: ["foo","bar",[1,2,"baz"],[3,[4]]]

// accept incoming POST data, assumed to be in JSON notation
$input = file_get_contents('php://input', 1000000);
$value = $json-&gt;decode($input);
&lt;/code&gt;</description>
  </docblock>
  <method name="Services_JSON" start="133" end="136" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="constructs a new JSON instance"/>
      <param description="object behavior flags; combine with boolean-OR" type="int" variable="$use">possible values:
                          - SERVICES_JSON_LOOSE_TYPE:  loose typing.
                                  "{...}" syntax creates associative arrays
                                  instead of objects in decode().
                          - SERVICES_JSON_SUPPRESS_ERRORS:  error suppression.
                                  Values which can't be encoded (e.g. resources)
                                  appear as NULL instead of throwing errors.
                                  By default, a deeply-nested resource will
                                  bubble up with an error, so all return values
                                  from encode() should be checked with isError()</param>
    </docblock>
    <parameter name="use" byreference="false" type="integer" default="0"/>
  </method>
  <method name="utf162utf8" start="149" end="180" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="convert a string from one UTF-16 char to one UTF-8 char">Normally should be handled by mb_convert_encoding, but
provides a slower PHP-only method for installations
that lack the multibye string extension.</description>
      <param description="UTF-16 character" type="string" variable="$utf16"/>
      <return description="UTF-8 character" type="string"/>
      <access value="private"/>
    </docblock>
    <parameter name="utf16" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="oh please oh please oh please oh please oh please" line="151"/>
      <comment value="ignoring UTF-32 for now, sorry" line="178"/>
    </inline>
  </method>
  <method name="utf82utf16" start="193" end="224" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="convert a string from one UTF-8 char to one UTF-16 char">Normally should be handled by mb_convert_encoding, but
provides a slower PHP-only method for installations
that lack the multibye string extension.</description>
      <param description="UTF-8 character" type="string" variable="$utf8"/>
      <return description="UTF-16 character" type="string"/>
      <access value="private"/>
    </docblock>
    <parameter name="utf8" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="oh please oh please oh please oh please oh please" line="195"/>
      <comment value="ignoring UTF-32 for now, sorry" line="222"/>
    </inline>
  </method>
  <method name="encode" start="237" end="423" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="encodes an arbitrary variable into JSON format"/>
      <param description="any number, boolean, string, array, or object to be encoded." type="mixed" variable="$var">see argument 1 to Services_JSON() above for array-parsing behavior.
                          if var is a strng, note that encode() always expects it
                          to be in ASCII or UTF-8 format!</param>
      <return description="JSON string representation of input var or an error if a problem occurs" type="mixed"/>
      <access value="public"/>
    </docblock>
    <parameter name="var" byreference="false" type="{unknown}"/>
  </method>
  <method name="name_value" start="434" end="443" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="array-walking function for use in generating JSON-formatted name-value pairs"/>
      <param description="name of key to use" type="string" variable="$name"/>
      <param description="reference to an array element to be encoded" type="mixed" variable="$value"/>
      <return description="JSON-formatted name-value pair, like '&quot;name&quot;:value'" type="string"/>
      <access value="private"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="reduce_string" start="453" end="470" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="reduce a string by removing leading and trailing comments and whitespace"/>
      <param description="string value to strip of comments and whitespace" variable="$str" type="string"/>
      <return description="string value stripped of comments and whitespace" type="string"/>
      <access value="private"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="eliminate extraneous space" line="468"/>
    </inline>
  </method>
  <method name="decode" start="484" end="761" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="decodes a JSON string into appropriate variable"/>
      <param description="JSON-formatted string" type="string" variable="$str"/>
      <return description="number, boolean, string, array, or object" type="mixed">corresponding to given JSON input string.
                  See argument 1 to Services_JSON() above for object-output behavior.
                  Note that decode() always returns strings
                  in ASCII or UTF-8 format!</return>
      <access value="public"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="isError" start="766" end="776" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description/>
      <todo value="Ultimately, this should just call PEAR::isError()"/>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="code" byreference="false" type="{unknown}" default="null"/>
  </method>
</class>
